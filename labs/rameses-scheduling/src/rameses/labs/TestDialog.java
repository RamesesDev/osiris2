/*
 * TestDialog.java
 *
 * Created on July 16, 2011, 9:59 AM
 */

package rameses.labs;

import com.rameses.messaging.ByteQueueMessage;
import com.rameses.messaging.EventHandler;
import com.rameses.messaging.AbstractEventQueue;
import com.rameses.messaging.BasicFileEventQueue;
import com.rameses.messaging.QueueMessage;

import com.rameses.messaging.TextQueueMessage;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author  jzamss
 */
public class TestDialog extends javax.swing.JDialog {
    
    private FileOutputStream fileOutput;
    private File file;
    private AbstractEventQueue eventQueue;
    
    /** Creates new form TestDialog */
    public TestDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //eventQueue = new ListEventQueue();
        
        eventQueue = new BasicFileEventQueue("test1", "d:/testnew");
        ((BasicFileEventQueue)eventQueue).setLimit(500);
        eventQueue.addEventHandler( new MyTest() );

        /*
        processor = eventQueue.newBatchFileQueueProcessor("test1","d:/testnew");
        ((BaicFileEventQueue )processor).setLimit( 100 );
         */
        /*
        file = new File("d:/testfile.txt");
        try {
            if(!file.exists()) file.createNewFile();
        } catch(Exception ex) {;}
         */
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        cmdStart = new javax.swing.JButton();
        cmdPause = new javax.swing.JButton();
        cmdSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtValue = new javax.swing.JTextArea();
        cmdStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        cmdStart.setText("START");
        cmdStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartActionPerformed(evt);
            }
        });

        cmdPause.setText("PAUSE");
        cmdPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPauseActionPerformed(evt);
            }
        });

        cmdSend.setText("Send");
        cmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSendActionPerformed(evt);
            }
        });

        txtValue.setColumns(20);
        txtValue.setRows(5);
        jScrollPane1.setViewportView(txtValue);

        cmdStop.setText("STOP");
        cmdStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                    .add(cmdSend)
                    .add(layout.createSequentialGroup()
                        .add(cmdStart)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmdPause)
                        .add(58, 58, 58)
                        .add(cmdStop)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdStart)
                    .add(cmdPause)
                    .add(cmdStop))
                .add(36, 36, 36)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdSend)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cmdStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStopActionPerformed
        // TODO add your handling code here:
        //try {fileOutput.close();}catch(Exception ex){;}
        eventQueue.shutdown();
        JOptionPane.showMessageDialog(null,"stopped the service");
    }//GEN-LAST:event_cmdStopActionPerformed
    
    private void cmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSendActionPerformed
        TextQueueMessage msg = new TextQueueMessage(txtValue.getText()+"\n");
        eventQueue.send(msg);
        txtValue.setText("");
    }//GEN-LAST:event_cmdSendActionPerformed
    
    private void cmdPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPauseActionPerformed
        eventQueue.stop();
    }//GEN-LAST:event_cmdPauseActionPerformed
    
    private class MyTest implements EventHandler {
        public void onMessage(QueueMessage msg) {
            if(msg instanceof TextQueueMessage ) {
                TextQueueMessage txt = (TextQueueMessage)msg;
                System.out.println(txt.getMessage());
            } else if(msg instanceof ByteQueueMessage ) {
                ByteQueueMessage txt = (ByteQueueMessage)msg;
                System.out.println(new String((byte[])txt.getMessage()));
            }
            
            
            
            /*
            try {
                fileOutput.write( (byte[]) msg.getMessage() );
            } catch(Exception ex) {
                System.out.println("ERROR " + new String(b) + " : " + ex.getMessage());
            }
             */
        }
    }
    
    private boolean started;
    
    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed
        try {
            //fileOutput = new FileOutputStream(file, true);
            eventQueue.start();
            if(!started) {
                //System.out.println("starting spawing threads");
                //started = true;
                //new Thread(new MyThreader("Server 1 message eof ***1",3000)).start();
                //new Thread(new MyThreader("Server 2 message this is what the server is for *** 2",2000)).start();
                //new Thread(new MyThreader("Server 3 message this is what the server3 is for *** 3",1000)).start();
                //new Thread(new MyThreader("Server 4 message this is what server4 if eof ***4",3000)).start();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdStartActionPerformed
    
    private class MyThreader implements Runnable {
        private String text;
        private int delay;
        
        public MyThreader(String t, int d) {
            this.text = t;
            this.delay = d;
        }
        
        public void run() {
            try {
                for(int i=0;i<15;i++) {
                    TextQueueMessage msg = new TextQueueMessage(text);
                    eventQueue.send(msg);
                    Thread.sleep(delay);
                }
            } catch(Exception e) {
                
            }
        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialog d = new TestDialog(null, true);
                d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                d.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdPause;
    private javax.swing.JButton cmdSend;
    private javax.swing.JButton cmdStart;
    private javax.swing.JButton cmdStop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtValue;
    // End of variables declaration//GEN-END:variables
    
}
